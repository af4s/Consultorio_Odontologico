/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.TMProcedimentos;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Scanner;
import model.DColaborador;
import model.Procedimento;

/**
 *
 * @author cfreitas
 */
public class ListaProcedimentos extends javax.swing.JDialog {

    private TMProcedimentos tmProcedimentos;
    private Procedimento procedimentoSelecionado;
    private int indiceSelecionado;
    private DColaborador usuarioLogado;

    /**
     * Creates new form TesteLista
     *
     * @param parent
     * @param modal
     */
    public ListaProcedimentos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        initComponents();

        this.usuarioLogado = new DColaborador();
        this.tmProcedimentos = new TMProcedimentos();
        this.tblProcedimentos.setModel(tmProcedimentos);

//        String usuario = this.usuarioLogado.getUsuario();
//        String caminho = "src/csv/lst_procedimentos_" + usuario + ".csv";
//        this.carregarArquivo(caminho);
        this.tmProcedimentos.fireTableDataChanged();
        this.indiceSelecionado = -1;

    }

    public DColaborador getUsuarioLogado() {
        return usuarioLogado;
    }

    public void setUsuarioLogado(DColaborador usuarioLogado) {
        this.usuarioLogado = usuarioLogado;
    }

    public TMProcedimentos getTmProcedimentos() {
        return tmProcedimentos;
    }

    public void setTmProcedimentos(TMProcedimentos tmProcedimentos) {
        this.tmProcedimentos = tmProcedimentos;
    }

    public Procedimento getProcedimentoSelecionado() {
        return procedimentoSelecionado;
    }

    public void setProcedimentoSelecionado(Procedimento procedimentoSelecionado) {
        this.procedimentoSelecionado = procedimentoSelecionado;
    }

    public int getIndiceSelecionado() {
        return indiceSelecionado;
    }

    public void setIndiceSelecionado(int indiceSelecionado) {
        this.indiceSelecionado = indiceSelecionado;
    }

    public final void carregarArquivo(String caminho) {

        try {

            FileReader arquivo = new FileReader(caminho);
            Scanner ler = new Scanner(arquivo);
            ler.useDelimiter("\n");
            ler.next(); // pulando linha do cabeçalho

            while (ler.hasNext()) {

                String linhaCSV = ler.next();
                String[] linha = linhaCSV.split(";");

                Procedimento p = this.conferirTipo(linha);

                p.setInfoCSV(linhaCSV);
                this.tmProcedimentos.addLinha(p);

            }

        } catch (FileNotFoundException ex) {
            System.out.println("Não achei o arquivo");
        }
    }

    public Procedimento conferirTipo(String[] linha) {

        Procedimento p = null;

        if (linha[1].equals(Procedimento.CLAREAMENTO.getDescricao())) {

            p = Procedimento.CLAREAMENTO;

        } else if (linha[1].equals(Procedimento.ENDODONTIA.getDescricao())) {

            p = Procedimento.ENDODONTIA;

        } else if (linha[1].equals(Procedimento.ENXERTO.getDescricao())) {

            p = Procedimento.ENXERTO;

        } else if (linha[1].equals(Procedimento.IMPLANTE.getDescricao())) {

            p = Procedimento.IMPLANTE;

        } else if (linha[1].equals(Procedimento.PROTESE.getDescricao())) {

            p = Procedimento.PROTESE;

        } else if (linha[1].equals(Procedimento.RASPAGEM.getDescricao())) {

            p = Procedimento.RASPAGEM;

        } else if (linha[1].equals(Procedimento.TRATAMENTO.getDescricao())) {

            p = Procedimento.TRATAMENTO;

        }
        return p;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblProcedimentos = new javax.swing.JTable();
        lblTitulo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lista de Pacientes Cadastrados");
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        tblProcedimentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblProcedimentos.setToolTipText("Clique duas vezes no paciente desejado para selecioná-lo!");
        tblProcedimentos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblProcedimentosMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblProcedimentos);

        lblTitulo.setFont(new java.awt.Font("DejaVu Sans", 1, 18)); // NOI18N
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("LISTA DE PACIENTES CADASTRADOS NO SISTEMA");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(lblTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 876, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitulo)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(910, 380));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tblProcedimentosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblProcedimentosMouseReleased

        if (evt.getClickCount() == 2) {
            this.indiceSelecionado = this.tblProcedimentos.getSelectedRow();
            this.procedimentoSelecionado = this.getTmProcedimentos().getLstProcedimentos().get(this.indiceSelecionado);
            this.tmProcedimentos.fireTableDataChanged();
            dispose();
        }
    }//GEN-LAST:event_tblProcedimentosMouseReleased

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        String caminho = "src/csv/lst_procedimentos_" + this.usuarioLogado.getUsuario() + ".csv";
        this.carregarArquivo(caminho);
        this.tmProcedimentos.fireTableDataChanged();
    }//GEN-LAST:event_formWindowActivated

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tblProcedimentos;
    // End of variables declaration//GEN-END:variables
}
